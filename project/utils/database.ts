import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

const API_URL = 'https://ledger-creation-new.vercel.app/api';

// Get all companies
export const getCompanies = async () => {
  try {
    const response = await axios.get(`${API_URL}/companies`);
    return response.data;
  } catch (error) {
    console.error('Error fetching companies:', error);
    throw error;
  }
};

// Initialize database connection
export const initializeDatabase = async () => {
  try {
    // Test the connection by making a simple request
    await axios.get(`${API_URL}/suppliers`);
    console.log('Database connection initialized successfully');
  } catch (error) {
    console.error('Failed to initialize database connection:', error);
    throw error;
  }
};

// Get all suppliers
export const getLedgerEntries = async () => {
  try {
    // Get company ID from AsyncStorage
    const companyId = await AsyncStorage.getItem('companyId');
    if (!companyId) {
      throw new Error('Company ID not found. Please log in again.');
    }

    const response = await axios.get(`${API_URL}/suppliers`, {
      params: { companyId },
      headers: { 'company-id': companyId }
    });

    if (!response.data) {
      throw new Error('No data received from server');
    }
    // Validate the response data structure
    if (!Array.isArray(response.data)) {
      throw new Error('Invalid data format received from server');
    }
    return response.data;
  } catch (error: any) {
    console.error('Error fetching suppliers:', {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data
    });
    throw new Error(error.response?.data?.message || 'Failed to fetch suppliers');
  }
};

// Get a supplier by ID
export const getLedgerEntryById = async (id: number) => {
  try {
    const response = await axios.get(`${API_URL}/suppliers/${id}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching supplier:', error);
    throw error;
  }
};

// Save a new supplier
export const saveLedgerEntry = async (data: any) => {
  try {
    // Validate city
    const cityId = data.city;
    if (!cityId) {
      throw new Error('Please select a city.');
    }

    // Get company ID from AsyncStorage with error handling
    let companyId;
    try {
      companyId = await AsyncStorage.getItem('companyId');
      if (!companyId || companyId === '') {
        throw new Error('No company ID found. Please log in again.');
      }
    } catch (storageError) {
      console.error('Error accessing AsyncStorage:', storageError);
      throw new Error('Failed to access storage. Please check if you are properly logged in.');
    }

    // Use the selected ledger group ID from the form
    const ledgerGroupId = data.ledgerGroupId;
    if (!ledgerGroupId) {
      throw new Error('Please select a ledger group.');
    }

    // Create payload matching exactly with Supplier table schema
    const payload = {
      // SupplierId is auto-generated by the database
      Supplier: data.ledgerName,
      Add1: data.address1 || '',
      Add2: data.address2 || '',
      City: cityId,
      Phone: data.phoneNumber || '',
      Fax: '',
      TNGST_No: data.gstNumber || '',
      TIN_No: '',
      Mailid: data.email || '',
      Contact_person: data.contact || '',
      Mobile_No: data.mobileNumber || '',
      Supplier_Customer: 'S', // 'S' for Supplier
      Isactive: data.isActive ? 'Y' : 'N',
      Add3: data.address3 || '',
      CompId: parseInt(companyId),
      LedgerGroupId: ledgerGroupId,
      PrintName: data.printName || data.ledgerName,
      SupCode: data.ledgerName.substring(0, 3).toUpperCase(),
      CreditDays: 0,
      VhNo: '',
      OpBalAmt: parseFloat(data.openingBalance || '0'),
      OpType: data.balanceType || 'Dr',
      OpDt: new Date().toISOString(),
      LastUpdate: new Date().toISOString()
    };

    console.log('Preparing to save supplier with payload:', payload);
    
    try {
      const response = await axios.post(`${API_URL}/suppliers`, payload);
      console.log('Supplier saved successfully:', response.data);
      return response.data;
    } catch (apiError: any) {
      console.error('API Error Details:', {
        status: apiError.response?.status,
        statusText: apiError.response?.statusText,
        data: apiError.response?.data,
        message: apiError.message
      });
      const errorMessage = apiError.response?.data?.message || apiError.message || 'Failed to save supplier';
      throw new Error(errorMessage);
    }
  } catch (error: any) {
    console.error('Error in saveLedgerEntry:', error.message);
    throw error;
  }
};

// Clear database (not needed for MS SQL implementation)
export const clearDatabase = async () => {
  console.warn('clearDatabase is not implemented for MS SQL Server');
};

// Delete supplier (optional implementation)
export const deleteLedgerEntry = async (id: number) => {
  console.warn('deleteLedgerEntry is not implemented for MS SQL Server');
};

// Update supplier (optional implementation)
export const updateLedgerEntry = async (id: number, data: any) => {
  console.warn('updateLedgerEntry is not implemented for MS SQL Server');
};